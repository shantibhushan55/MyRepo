package com.hp.es.test.hpsetest;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Properties;



/*
* This class is the Service Test Utilities
* 
*/
public class TestConfigHolder extends Properties {
    
  
    /**
	 * 
	 */
	private static final long serialVersionUID = 7465014822248218148L;


    
    private static final String HPSE_TEST_PROPERTIES_FILENAME = "HpseServiceTester.properties";


   /** Name of the environment variable that should contain the directory path
    *  of the application. Also used as prefix in properties values for
    *  specifying paths relative to this directory.
    */
   private static final String TEST_HOME = "TEST_HOME";
   
    /** Prologue containing xml version tag as generated by CASTOR */
    public static final String CASTOR_PROLOGUE = "<?xml version=\"1.0\" encoding = \"UTF-8\"?>";   
   
   
   /*
        An instance for the singleton
   */
   private static volatile TestConfigHolder _instance= null;

   /*
    This constructor is disable
   */
   private TestConfigHolder() {
   }


   /**
    * Constructor
    * Loads a property file that is looked for in the system class path.
    * @param the file Name
   */
   private TestConfigHolder( String fileName )   {
      super();
      readPropertyFile(fileName);
   }

   
   
   /**
    * read the property file
    * Loads a property file that is looked for in the system class path.
    * @param the file Name
    * @return void
   */   
   private void readPropertyFile(String fileName) {
      InputStream is   = null;
      Enumeration enumeration = null;
      
      

      try    {
         is  = getClass().getResourceAsStream( "/" + fileName );
         load(is);
      } catch (IOException e)      {
        System.out.println("Can not find file : " + fileName);
         return;
      }

      // substitute the env variable BASF_HOME in any paths given in the
      // properties file and show final entries in log file.

      String applDir = System.getProperty( TEST_HOME, "");
      int prefixLen = TEST_HOME.length();

      enumeration = propertyNames();
      
      while ( enumeration.hasMoreElements() )      {
         String key     = (String)enumeration.nextElement();
         String entry   = getProperty(key);
         int foundIndex;

         while ( (foundIndex = entry.toUpperCase().indexOf(TEST_HOME)) >= 0 )      {
            entry = entry.substring(0, foundIndex)
                    + applDir
                    + entry.substring(foundIndex + prefixLen, entry.length());
         }
         put(key, entry);
      }//while

   }
   
   
   /*
   *
   * Get a propertie from the properties file
   * @param the p name
   * @return the value
   */
   public String getConfigParameter(String key) {
        return getProperty(key);
   }
   
   /*
   *
   * Get a propertie from the properties file
   * @param the p name
   * @param the default value
   * @return the default value
   */   
   public String getConfigParameter(String key, String defaultValue) {
        return getProperty(key,defaultValue);
   }  
   

   
   /**
    * get An instance of ConfigHolder
    * @return ConfigHolder
   */   
   public static TestConfigHolder getInstance() {

            synchronized(TestConfigHolder.class) {
                if (_instance == null) {
                    _instance = new TestConfigHolder(TestConfigHolder.HPSE_TEST_PROPERTIES_FILENAME);
                }
            }
        return _instance;
   }

}
//eof