<project name="unittest" default="usage">

	<!-- $Header: /ENTITLEMENT/build_unittest.xml 1.37 2004-05-08 03:32:24+02 entitlem Exp $ -->

	<!-- some documentation!

	General approach:

		Use the workspace, Luke! there is no fupdate/jar/deploy stuff here.  That makes
		sense for integration and functional testing, not unit.  The context for your
		testing should either be done, or set using e.g. compileServices.

		Test classes are <X>Test.java; these should be "leaf"s not suites, otherwise
		we risk recursive testing.  For aggregate tests (suites), simply avoid the naming
		convention, e.g. a TestPackage.java.

		Write as many <X>Test classes as you like; they can be in the -Dpackage or
		elsewhere (though if elsewhere, -DcompileBoth= will not find the non-test code).

		Testing is at one of two levels: package or service-wide.  When working at package
		level (by specifying -Dpackage="my/test/package"), only those tests will be compiled
		and executed.  When working at service-wide level (by using "testServices" target),
		all tests matching <X>Test.java convention are compiled and executed.

		Using the -DcompileBoth= flag causes the code-under-test (either package or services)
		to be compiled first, then the tests themselves will be compiled and executed.

		By service-wide, we could say <product>-wide.  Services is one product supported
		here, but the way the targets are done we could easily extend to support other products
		like backend or supporttools.

		Also, compiling tests is driven by srcdir contents, but finding and executing tests
		is driven by classdir contents (this is intentional); that might explain any
		strange behavior you see.

	Usage details:

		See usage (default) target, esp the -D options!

	Special requirements:

		To use junit/junitreport tasks, your ant must be extended with the following:

		    optional.jar    // ant extensions including junit
			junit.jar       // junit lib itself

		The easiest way to do this is to put them in your ant/lib/

	Problems/not implemented:

		We assume test classes share a package with the code-under-test; if not, things
		still work but the -Dpackage is that of the test classes and -DcompileBoth will
		not find the code-under-test.

		There is duplication (classpath, .java fileset, ?) with build_service.xml; we reuse
		the compile_services target there, but some of our classpath and fileset stuff is
		duplicated here and it might be nice to single-source it (how to share <path> and
		<patternset> definitions?).

		Various class.path definitions are not well factored and probably too inclusive; no
		time yet to pare them down.

		Report "publishing" and mailing not yet implemented (see bottom of 'test' target)

		Maybe nice to have a -DcheckinReport= to save a reports in softcm on special occasions.

		Not yet using source patternsets like I would like to
	-->



	<!-- patternsets for java sources _________________________________________

	currently not being used.

	<patternset id="test.sources" >
		<include name="*Test.java"/>
	</patternset>

	<patternset id="non.test.sources" >
		<include name="*.java"/>
		<exclude name="*Test.java"/>
	</patternset>

	<patternset id="services.test.sources" >
		<include name="**/*Test.java"/>
	</patternset>

	<patternset id="services.non.test.sources" >
		<include name="**/*.java"/>
		<exclude name="**/*Test.java"/>
	</patternset>
	-->


	<!-- path definitions for classpaths ______________________________________
	-->

	<property name="contrib" value="contrib"/>
	<property name="contrib_eia"  value="${contrib}/EIA_3_6" />
	<!-- this one stupidly executes a bunch of requests against KNIGHT - it does not really make sense anymore since KNIGHT improved their service-->
	<property name="knight_mass_unit_test1" value="com/hp/es/service/productEntitlement/knight/logic/access/KnightTest.*"/>
	<property name="knight_mass_unit_test2" value="com/hp/es/test/hpsetest/knight/KnightPerformanceTest.*"/>
	<property name="this_is_not_a_test" value="com/hp/es/service/productEntitlement/mapping/AbstractMapperTest.*"/>
	<property name="services_propsdir"	value="./_conf_ES" />
	<property name="eia_sf_propsdir"	value="./_conf_EIA" />
	<property environment="env"/>

	<property name="axis" value="lib/apache_axis/axis.jar:lib/apache_axis/commons-discovery.jar:lib/apache_axis/commons-logging.jar:lib/apache_axis/jaxrpc.jar:lib/apache_axis/saaj.jar:lib/apache_axis/wsdl4j.jar" />

	<path id="compile.class.path">

		<!-- things needed to COMPILE the TESTS -->

		<!-- add things needed for your tests -->

		<pathelement location="lib/HpseCastor.jar" />
		<pathelement location="lib/EsCastor.jar" />
		<pathelement location="lib/KnightAxis.jar" />
		<pathelement location="lib/KnightTestCastorHelper.jar" />
		<pathelement location="lib/SwatIdl.jar" />
		<pathelement location="lib/log4j.jar" />
		<pathelement location="${contrib_eia}/lib/eialib.jar" />
	</path>


	<path id="compile.both.class.path">

		<!-- things needed to COMPILE the SERVICES -->

		<!-- reference classpath is at target: _hpse_service_jar@build_service.xml -->

		<pathelement location="lib/HpseCastor.jar" />
		<pathelement location="lib/EsCastor.jar" />
		<pathelement location="lib/KnightAxis.jar" />
		<pathelement location="lib/KnightTestCastorHelper.jar" />
		<pathelement location="lib/servlet.jar" />
		<pathelement location="lib/SwatIdl.jar" />
		<pathelement location="lib/orbacus/OB.jar" />
		<pathelement location="lib/ojdbc14.jar" />
		<pathelement location="lib/jndi.jar" />
		<pathelement location="lib/RUC.jar" />
		<pathelement location="lib/jakarta-oro.jar" />

		<pathelement location="lib/apache_axis/axis.jar" />
		<pathelement location="lib/apache_axis/commons-discovery.jar" />
		<pathelement location="lib/apache_axis/commons-logging.jar" />
		<pathelement location="lib/apache_axis/jaxrpc.jar" />
		<pathelement location="lib/apache_axis/saaj.jar" />
		<pathelement location="lib/apache_axis/wsdl4j.jar" />

		<pathelement location="lib/log4j.jar" />

		<pathelement location="${contrib_eia}/lib/eialib.jar" />
		<pathelement location="${contrib_eia}/lib/eialib_client.jar" />
		<!-- <pathelement location="${contrib_eia}/lib/RMIProxy.jar" /> -->
	</path>

	<path id="knight.runtime.class.path">

    <path refid="runtime.class.path" />

    <!-- nothing more yet -->

	</path>

	<path id="runtime.class.path">

		<!-- things needed to RUN the TESTS -->

		<!-- this is a handy syntax, so I save it, but maybe not correct here
		<path refid="compile.both.class.path"/>
		-->

		<!-- lots of this is unnecessary, but I haven't cornered a classpath problem yet -->

		<pathelement location="./classes" />
		<pathelement location="${services_propsdir}" />
		<pathelement location="${eia_sf_propsdir}" />

		<pathelement location="lib/SwatIdl.jar" />
		<pathelement location="lib/jakarta-oro.jar" />

		<pathelement location="lib/orbacus/OB.jar" />
		<pathelement location="lib/HpseCastor.jar" />
		<pathelement location="lib/EsCastor.jar" />
		<pathelement location="lib/KnightAxis.jar" />
		<pathelement location="lib/KnightTestCastorHelper.jar" />
		<pathelement location="lib/ojdbc14.jar" />
		<pathelement location="lib/jndi.jar" />
		<pathelement location="lib/RUC.jar" />
		<pathelement location="lib/EsCastor.jar" />
		<pathelement location="lib/KnightTestCastorHelper" />

		<pathelement location="lib/apache_axis/axis.jar" />
		<pathelement location="lib/apache_axis/commons-discovery.jar" />
		<pathelement location="lib/apache_axis/commons-logging.jar" />
		<pathelement location="lib/apache_axis/jaxrpc.jar" />
		<pathelement location="lib/apache_axis/saaj.jar" />
		<pathelement location="lib/apache_axis/wsdl4j.jar" />

		<pathelement location="lib/log4j.jar" />

    <pathelement location="${contrib_eia}/lib/eialib.jar" />

		<!-- these are the tests to run for Knight: src/xml/service/test/KnightTests.xml -->
		<pathelement location="src/xml/service/test/" />

		<!-- these are the tests to run for Mock stuff:: test/service/regress/knight -->
		<pathelement location="test/service/regress/knight/" />

	</path>


	<!-- setup targets ________________________________________________________
	-->

	<target name="setprops">
		<property name="workspace"	     value="." />
		<property name="package"			   value="com/hp/es/service/productEntitlement" />
	  <property name="knight_mock_gen" value="com/hp/es/test/hpsetest/knight/KnightMockGenerator.class" />
	  <property name="db_tests"        value="com/hp/es/service/db/**/*Test.class" />
	  <property name="service_tests"   value="**/*Test.class" />
	  <property name="com.hp.es.test.knight.scanner.fileOutputLocation" value="A:\THISISNOTVALID" />

	  <fail unless="env.eia_home">
	    Please set environment variable eia_home - must be set to parent directoy of "logs".
	  </fail>

	  <echo>parent directory of logs is ${env.eia_home}</echo>

	</target>

	<target name="init" depends="setprops">
		<property name="classes_dir"		value="${workspace}/classes" />
		<property name="report_dir"			value="${workspace}/report" />
		<property name="src_dir"			value="${workspace}/src/java" />
		<property name="package_srcdir"		value="${src_dir}/${package}" />
		<property name="package_classdir"	value="${classes_dir}/${package}" />
	</target>

	<target name="prepare" depends="init">
		<mkdir dir="${report_dir}" />
		<mkdir dir="${report_dir}/html" />
	</target>


	<!-- package-level testing targets ________________________________________
	-->

	<target name="compileNonTests" if="compileBoth" >
		<javac  srcdir="${package_srcdir}"
				destdir="${classes_dir}"
				includes="*.java"
				excludes="*Test.java" >
			<classpath refid="compile.both.class.path"/>
		</javac>
	</target>

	<target name="compileTests" depends="prepare, compileNonTests">
		<javac  srcdir="${package_srcdir}"
				destdir="${classes_dir}"
				includes="**/*Test.java,**/Mock*.java">
				<!--
				<patternset refid="test.sources" />
				-->
			<classpath refid="compile.class.path"/>
		</javac>
	</target>

  <target name="testFlat">

		<property name="testfiles" value="*Test.class"/>

		<antcall target="testRecursive" />

  </target>

	<target name="testRecursive" depends="compileTests">
		<echo message="package_srcdir   is ${package_srcdir}" />
		<echo message="package_classdir is ${package_classdir}" />
		<echo message="" />
		<echo message="Excluding: ${knight_mass_unit_test1}" />
		<echo message="Excluding: ${knight_mass_unit_test2}" />
		<echo message="Excluding: ${this_is_not_a_test}" />
		<echo message="" />

		<property name="testfiles" value="**/*Test.class"/>

		<junit printsummary="true" fork="yes">

		  <jvmarg value="-DTEST_HOME=${env.eia_home}" />
		  <jvmarg value="-Deia.home=${env.eia_home}" />
		  <jvmarg value="-Deia.redirectStdout=true" />

			<formatter type="xml" />

			<batchtest todir="${report_dir}">
				<fileset dir="${classes_dir}">
					<include name="${package}/${testfiles}" />
					<exclude name="${knight_mass_unit_test1}" />
					<exclude name="${knight_mass_unit_test2}" />
					<exclude name="${this_is_not_a_test}" />
				</fileset>
			</batchtest>

			<classpath refid="runtime.class.path" />

		</junit>

		<junitreport todir="${report_dir}">

			<fileset dir="${report_dir}">
				<include name="TEST-*.xml"/>
			</fileset>

			<report format="frames" todir="${report_dir}/html"/>

		</junitreport>

		<!-- <copy> publishes reports somewhere, e.g. APACHE_2000x/unittest ? -->

		<!-- <mail> the weblink, with success/failure in subject? -->
	</target>


	<!-- service-wide extensions ______________________________________________
	-->

	<target name="compileServicesNonTests" if="compileBoth" >

		<!-- use external services compile target -->

		<echo message="Calling compile_services@build_service.xml ..."/>
		<ant antfile="build_service.xml" target="compile_services" />
		<echo message="Returned from compile_services@build_service.xml."/>
	</target>

	<target name="compileServicesTests" depends="prepare, compileServicesNonTests" >
		<echo message="Compiling all services test code ..."/>

		<javac
			srcdir="${src_dir}"
			destdir="${classes_dir}"
			includes=
			   "com/hp/es/serviceHandler/**/*Test.java,
				com/hp/es/constants/**/*Test.java,
				com/hp/es/util/**/*Test.java,
				com/hp/es/service/**/*Test.java" >
			<classpath refid="compile.both.class.path"/>
		</javac>

	</target>

	<target name="testServices" depends="compileServicesTests">

		<echo message="" />
		<echo message="Excluding: ${knight_mass_unit_test1}" />
		<echo message="Excluding: ${knight_mass_unit_test2}" />
		<echo message="Excluding: ${this_is_not_a_test}" />
		<echo message="" />

		<junit printsummary="true" fork="yes">

		  <jvmarg value="-DTEST_HOME=${env.eia_home}" />
		  <jvmarg value="-Deia.home=${env.eia_home}" />

			<formatter type="xml" />

			<batchtest todir="${report_dir}">
				<fileset dir="${classes_dir}">
					<include name="${service_tests}" />
					<exclude name="${knight_mass_unit_test1}" />
					<exclude name="${knight_mass_unit_test2}" />
					<exclude name="${this_is_not_a_test}" />
					<exclude name="${db_tests}" />
				</fileset>
			</batchtest>

			<classpath refid="runtime.class.path" />

		</junit>

		<junitreport todir="${report_dir}">

			<fileset dir="${report_dir}">
				<include name="TEST-*.xml"/>
			</fileset>

			<report format="frames" todir="${report_dir}/html"/>

		</junitreport>

		<!-- <copy> publishes reports somewhere, e.g. APACHE_2000x/unittest ? -->

		<!-- <mail> the weblink, with success/failure in subject? -->
	</target>


	<target name="testKnightMock" depends="compileServicesTests">

		<echo message="" />
		<echo message="Excluding: ${knight_mass_unit_test1}" />
		<echo message="Excluding: ${knight_mass_unit_test2}" />
		<echo message="Excluding: ${this_is_not_a_test}" />
		<echo message="" />

		<junit printsummary="true" fork="yes">

		  <jvmarg value="-DTEST_HOME=${env.eia_home}" />
		  <jvmarg value="-Deia.home=${env.eia_home}" />
		  <jvmarg value="-Dcom.hp.es.test.knight.scanner.fileOutputLocation=${com.hp.es.test.knight.scanner.fileOutputLocation}" />

			<formatter type="xml" />

			<batchtest todir="${report_dir}">
				<fileset dir="${classes_dir}">
					<include name="${knight_mock_gen}" />
					<exclude name="${knight_mass_unit_test1}" />
					<exclude name="${knight_mass_unit_test2}" />
					<exclude name="${this_is_not_a_test}" />
				</fileset>
			</batchtest>

			<classpath refid="runtime.class.path" />

		</junit>

		<junitreport todir="${report_dir}">

			<fileset dir="${report_dir}">
				<include name="TEST-*.xml"/>
			</fileset>

			<report format="frames" todir="${report_dir}/html"/>

		</junitreport>

		<!-- <copy> publishes reports somewhere, e.g. APACHE_2000x/unittest ? -->

		<!-- <mail> the weblink, with success/failure in subject? -->
	</target>


	<!-- other entry points ___________________________________________________
	-->

	<target name="clean" depends="init">
		<delete verbose="no" includeEmptyDirs="true">
			<fileset dir="${classes_dir}" includes="**/*"/>
			<fileset dir="${report_dir}"  includes="**/*"/>
		</delete>
	</target>

	<target name="compileServices">

		<!-- use external services compile target -->

		<echo message="Calling compile_services@build_service.xml ..."/>
    <ant antfile="build_common.xml" target="clean" />
    <ant antfile="build_service.xml" target="compile_services" />
		<echo message="Returned from compile_services@build_service.xml."/>
	</target>


    <!-- usage ________________________________________________________________
    -->

    <target name="usage" depends="init">
    <echo>

    This ant script compiles and runs JUnit tests.  The available targets are:

        testFlat        Compiles and runs the tests specified by -Dpackage
                        (${package}/*Test.class)
        testRecursive   Compiles and runs the tests specified by -Dpackage
                        (${package}/**/*Test.class)
        testServices    Compiles and runs all services tests
                        (-Dservice_tests, except DB layer)
                        (currently executing ${service_tests})
        testKnightMock  Takes all testware requests and saves them to com.hp.es.test.knight.scanner.fileOutputLocation
                        (${knight_mock_gen}) (${com.hp.es.test.knight.scanner.fileOutputLocation})
        clean           Removes all .class and report files (will need to recompile all)
        compileServices Compiles all services code (to update classes/ after clean)

    and the command line options are:

        -Dpackage="package/in/directory/format"     (package containing TEST classes)
    e.g -Dpackage="com/hp/es/service/productEntitlement"

        -Dservices_propsdir="ES properties dir"     (default "./_conf_ES")
        -Deia_sf_propsdir="EIA SF properties dir"   (default "./_conf_EIA")

        -DcompileBoth=  First compile the code-under-test (either the package or all
                        services, depending on the target specified), then the tests

    The -D&lt;X&gt;= parameter(s) are a kind of flag (though the '=' is required);
    any supplied value is ignored.

	The -D*_propsdir parameter(s) are needed to put your (altered) properties files on the classpath.

    </echo>
    </target>


</project>
