/*
 * Project: HPS Entitlement Service - Mercury Integration
 *
 * Copyright (c) 2007 Hewlett-Packard GmbH, Germany.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Hewlett-Packard, GmbH. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Hewlett-Packard.
 *
 * Revision 1.0  
 * Author: olcay.yesilyurt@hp.com
 * Initial revision
 *
 */
package com.hp.es.service.contractSummary;

import java.util.Collection;
import java.util.Map;
import java.util.TreeMap;

import com.hp.es.service.contractSummary.db.CSOutputDetails;
import com.hp.es.service.contractSummary.keys.CSContactKey;
import com.hp.es.service.contractSummary.keys.CSKey;
import com.hp.es.service.contractSummary.keys.CSLocationKey;
import com.hp.es.service.util.XMLIdGenerator;
import com.hp.es.xml.service.AddressComplexType;
import com.hp.es.xml.service.ContactComplexType;

/**
 * This class stores all objects (classes created by Castor based on the
 * XML schema of the EsReply) for one EsReply. The database managers can
 * use the addXXX(Key, Object) methods to store that data.
 */
public class EsReplyCSContext {

    private static final char PREFIX_CHAR = 'S';

	/*
     * XMLIdGenerator used for ID/IDREF references in the XML schema
     */
    private XMLIdGenerator XMLIdGenerator;
    
    /*
     * The values of following maps are objects of classes generated by Castor.
     * The keys are classes from com.hp.es.service.replyGeneration.keys.*
     */
    private TreeMap<CSKey, Object> contactMap;
    private TreeMap<CSKey, Object> locationMap;
   
    private org.exolab.castor.types.Date overallContractStartDate;
    private org.exolab.castor.types.Date overallContractEndDate;

    private CSOutputDetails outputDetails;
    
    
    /**
     * public Constructor
     */
	public EsReplyCSContext(CSOutputDetails details){
		
  //      outputDetails = details;
        
        contactMap = new TreeMap<CSKey, Object>();
        locationMap = new TreeMap<CSKey, Object>();
        
        XMLIdGenerator = XMLIdGenerator.getXMLIdGenerator(EsReplyCSContext.PREFIX_CHAR);
	}
	
	
    /**
     * @returns true if at least one active AppliesTo was found

    public org.exolab.castor.types.Date getOverallContractStartDate() {
        return overallContractStartDate;
    }     */

    /**
     * @returns true if at least one active AppliesTo was found

    public org.exolab.castor.types.Date getOverallContractEndDate() {
        return overallContractEndDate;
    }    */

    /**
     * Method to access the Contacts for the current reply. This method should
     * be called after all appropriate mergeXXX() and createXXXRefs() methods
     * were called.
     * @return Collection of ContactComplexType
     */
    public Collection getContacts() {
        return contactMap.values();
    }

    /**
     * @return ContactComplexType
     */
    public ContactComplexType getContact(CSContactKey key) {
        return (ContactComplexType)contactMap.get(key);
    }
    
    
    /**
     * Store the given object identified by the key.
     */
    public void addContact(CSContactKey key, ContactComplexType o) {
        o.setId(XMLIdGenerator.nextId());
        storeObject(key, o, contactMap);
    }


    /**
     * Method to access the Locations for the current reply. This method should
     * be called after all appropriate mergeXXX() and createXXXRefs() methods
     * were called.
     * @return Collection of LocationComplexType
     */
    public Collection<Object> getLocations() {
        return locationMap.values();
    }


    /**
     * Store the given object identified by the key.
     */
    public void addLocation(CSLocationKey key, AddressComplexType o) {
        o.setId(XMLIdGenerator.nextId());
        storeObject(key, o, locationMap);
    }
    
    
    /**
     * Just put the key-object pair into the map.
     */
    private void storeObject(CSKey key, Object o, Map<CSKey, Object> target) {
        if (key==null) {
            throw new NullPointerException("The key must never be null");
        }

        if (o==null) {
            throw new NullPointerException("The object must never be null");
        }
        target.put(key, o);
    }
       
}
